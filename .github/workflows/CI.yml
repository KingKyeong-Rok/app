name: Build and Push to ECR

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      # 리포지토리의 코드를 체크아웃하여 사용할 수 있게 함

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17' # Java 17 환경을 설정
        distribution: 'adopt' # AdoptOpenJDK 배포판 사용

    - name: Build with Maven
      run: mvn clean package
      # Maven을 사용하여 프로젝트를 빌드 (깨끗한 빌드 후 패키지 생성)

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      # Docker Buildx를 설정하여 다중 플랫폼 이미지를 빌드할 수 있게 함

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS Access Key를 설정
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS Secret Access Key 설정
        aws-region: ${{ secrets.AWS_REGION }} # AWS 리전을 설정

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      # AWS ECR에 Docker 로그인, 빌드된 이미지를 푸시할 수 있게 설정

    - name: Set IMAGE_TAG
      run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
      # 현재 커밋의 해시에서 앞 7자리를 가져와 이미지 태그로 설정

    - name: Build and push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com # ECR 레지스트리 URL
        ECR_REPOSITORY: my-app-repo # Docker 이미지가 저장될 리포지토리 이름
        IMAGE_TAG: ${{ env.IMAGE_TAG }} # 이전 단계에서 설정한 이미지 태그
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . # Docker 이미지를 빌드
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG # 빌드된 이미지를 ECR에 푸시

    - name: Clone and update manifest repository
      env:
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }} # 개인 접근 토큰 (GitHub 인증용)
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} # AWS 계정 ID
        AWS_REGION: ${{ secrets.AWS_REGION }} # AWS 리전
        IMAGE_TAG: ${{ env.IMAGE_TAG }} # 설정된 이미지 태그
      run: |
        git clone https://${{ secrets.PAT_TOKEN }}@github.com/KingKyeong-Rok/manifest.git # manifest 리포지토리 클론
        cd manifest
        # Kubernetes 매니페스트 파일에서 이미지 태그를 최신 태그로 업데이트
        sed -i "s|image: .*|image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/my-app-repo:${{ env.IMAGE_TAG }}|" k8s/deploy-basic2.yml 
        git config --global user.email "0088skg@naver.com" # Git 사용자 이메일 설정
        git config --global user.name "KingKyeong-Rok" # Git 사용자 이름 설정
        if [ -n "$(git status --porcelain)" ]; then # 변경사항이 있으면
          git add k8s/deploy-basic2.yml # 변경된 파일 추가
          git commit -m "Update image to $IMAGE_TAG" # 커밋 메시지 작성
          git push https://${{ secrets.PAT_TOKEN }}@github.com/KingKyeong-Rok/manifest.git main # 변경사항을 원격 리포지토리에 푸시
        else
          echo "No changes to commit" # 변경사항이 없으면 메시지 출력
        fi
