# AKMS 가 들어가야 한다 - 이게 국룰
## ApiVersion, kind, metadata, Spec 이렇게 4개임
apiVersion: v1 #배스천에서 컨트롤 플레인으로 전달하는게 443 의 형식으로 전달하고 무엇인가를 요청할 때 apiVersion을 보고 컨트롤 플레인에게 전달하는 구조
# apiVersion이 무엇인지 찾아서 해야한다.
kind: Pod
# object들을 명시해서 만들꺼다.
metadata: # pod에 대한 이름과 라벨이 무엇인지 등을 정의해줌
  name: pod-name
  labels:
    name: pod-label
spec: # 생각해서 넣어야 한다. terraform 처럼 다 찾아보면서 넣어야 한다.
  containers: # 여기에서 container에 대한 정보와 개수를 정해서 넣을 수 있다.
  - name: containername # -의 의미는 array라는 뜻 array 또는 list 라는 뜻 -> 상위에 있는 containers 에 첫 글자와 '-' 글자가 맞아야 한다.
                      ## - 와 - 사이에 spec이 들어간다.
    image: nginx:latest
    resources:
      limits:
        memory: "128Mi" # 메가바이트임
        cpu: "500m" # cpu가 1개당 1000으로 계산하면 됨 ★주의! -> Mi가 아니고 m임 (대소문자 반드시 구분해야함)
    ports:
      - containerPort: 80


# 다 만들고나서 ~ 에 보낸다 근데 어떻게 보내느냐?
## kubectl apply -f ~/kube-workspace/pod-basic.yml 을 입력해주면 됨
### pod/pod-name created

# 삭제는 kubectl delete -f ~/kube-workspace/pod-basic.yml 을 입력해주면 됨

# kubectl log 를 치면 pod 안에서의 containers의 log를 볼 수 있다.

# kubectl get pod 해보면 나온다.
#[ec2-user@ip-172-28-10-85 ~]$ kubectl get pod
#NAME       READY   STATUS    RESTARTS   AGE
#pod-name   1/1     Running   0          24s

# kubectl get pod -o wide -> 넓게 보여준다.
#[ec2-user@ip-172-28-10-85 ~]$ kubectl get pod -o wide
#NAME       READY   STATUS    RESTARTS   AGE     IP              NODE                                               NOMINATED NODE   READINESS GATES
#pod-name   1/1     Running   0          2m28s   172.28.11.168   ip-172-28-11-231.ap-northeast-2.compute.internal   <none>           <none>

# kubectl describe pod
# Name:             pod-name
# Namespace:        default
# Priority:         0
# Service Account:  default
# Node:             ip-172-28-11-231.ap-northeast-2.compute.internal/172.28.11.231
# Start Time:       Fri, 19 Jul 2024 07:57:08 +0000
# Labels:           name=pod-label
# Annotations:      <none>
# Status:           Running
# IP:               172.28.11.168
# IPs:
#   IP:  172.28.11.168
# Containers:
#   containername:
#     Container ID:   containerd://ebd7d919c199a344f20090ef70df0aea22200668ac421ccafe62af323495245f
#     Image:          nginx:latest
#     Image ID:       docker.io/library/nginx@sha256:67682bda769fae1ccf5183192b8daf37b64cae99c6c3302650f6f8bf5f0f95df
#     Port:           80/TCP
#     Host Port:      0/TCP
#     State:          Running
#       Started:      Fri, 19 Jul 2024 07:57:18 +0000
#     Ready:          True
#     Restart Count:  0
#     Limits: -------> 리소스 관련 
#       cpu:     500m
#       memory:  128Mi
#     Requests:
#       cpu:        500m
#       memory:     128Mi
#     Environment:  <none>
#     Mounts:
#       /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-wmfvx (ro)
# Conditions: --------> 여러 조건들
#   Type                        Status
#   PodReadyToStartContainers   True 
#   Initialized                 True 
#   Ready                       True 
#   ContainersReady             True 
#   PodScheduled                True 
# Volumes:
#   kube-api-access-wmfvx:
#     Type:                    Projected (a volume that contains injected data from multiple sources)
#     TokenExpirationSeconds:  3607
#     ConfigMapName:           kube-root-ca.crt
#     ConfigMapOptional:       <nil>
#     DownwardAPI:             true
# QoS Class:                   Guaranteed
# Node-Selectors:              <none>
# Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
#                              node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
# Events: -----------> describe 에 들어오는 이유임 pod의 log가 남음(실행이 제대로 안 됐을 떄 보는 것)
#   Type    Reason     Age   From               Message
#   ----    ------     ----  ----               -------
#   Normal  Scheduled  2m7s  default-scheduler  Successfully assigned default/pod-name to ip-172-28-11-231.ap-northeast-2.compute.internal
# 스케줄러가 만들었다.
#   Normal  Pulling    2m7s  kubelet            Pulling image "nginx:latest"
# nginx 이미지를 받았다.
#   Normal  Pulled     118s  kubelet            Successfully pulled image "nginx:latest" in 8.999s (8.999s including waiting). Image size: 70984068 bytes.
# 
#   Normal  Created    118s  kubelet            Created container containername
# 컨테이너 이름이 생성됨
#   Normal  Started    117s  kubelet            Started container containername
# 컨테이너가 시작됨
